/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use protos/gen.sh to generate .pb.go files.
syntax = "proto3";
import "gogoproto/gogo.proto";
package protos;



service Monitor {
    rpc GetMonMap (MonConfigRequest) returns (MonConfigReply) {}
    rpc GetLayout (LayoutRequest) returns (LayoutReply) {}
    rpc OsdConfig(OsdConfigRequest) returns (OsdConfigReply) {}
    rpc PoolConfig(PoolConfigRequest) returns (PoolConfigReply) {}
    rpc PgConfig(PgConfigRequest) returns (PgConfigReply) {}
    rpc OsdStatusReport(OsdStatusReportRequest) returns (OsdStatusReportReply) {}
    rpc GetPgStatus(GetPgStatusRequest) returns (GetPgStatusReply) {}
}

message MonConfigRequest {
    string method = 1;
}

message MonConfigReply {
    uint64 lead_id = 1;
    MonMap map = 2;
}

message OsdStatusReportRequest {
    map<string, PgStatus> leader_pgs_status = 1 [(gogoproto.nullable) = false];
}

message GetPgStatusRequest {
    string pg_id = 1;
}

message GetPgStatusReply {
    PgStatus status = 1;
}

message OsdStatusReportReply {
    int32 ret_code = 1;
}

message LayoutRequest {
    string object_name = 1;
    string pool_name = 2;
}

message LayoutReply {
    int32 ret_code = 1;
    string pg_name = 2;
    repeated Osd osds = 3;
}

message Osd{
    int32 id = 1;
    string addr = 2;
    uint64 weight = 3;
    string host = 4;
    string zone = 5;
    bool up = 6;
    bool in = 7;
}

message OsdMap {
    uint64      epoch            = 1;
    map<int32, Osd>  memberList = 2;
}

message OsdConfigRequest {
    string keyRing = 1;
    Osd osd = 2;
    enum OpType {
        ADD = 0;
        DEL = 1;
        IN = 2;
        OUT = 3;
        UP = 4;
        DOWN = 5;
        LIST = 6;
    }
    OpType op_type = 3;
}

message OsdConfigReply {
    int32 ret_code = 1;
    OsdMap map = 2;
}

message PoolMap {
    uint64      epoch            = 1;
    map<int32, Pool>  pools = 2;
}

enum DistributePolicy {
    OSD  = 0;
    HOST = 1;
    ZONE = 2;
}

message Pool{
    int32 id = 1;
    string name = 2;
    int32 size = 3;
    int32 pg_numbers = 4;
    DistributePolicy policy = 5;
}

message PoolConfigRequest {
    string keyRing = 1;
    enum OpType {
        ADD = 0;
        DEL = 1;
        LIST = 2;
        SET_SIZE = 3;
        SET_PGS = 4;
    }
    OpType op_type = 2;
    string name = 3;
    int32 size = 4;
    int32 pg_numbers = 5;

    DistributePolicy policy = 6;
}

message PoolConfigReply {
    int32 ret_code = 1;
    PoolMap map = 2;
}

message PgMaps {
    uint64 epoch  = 1;
    map<int32, PgMap>  pgmaps = 2;
}

message PgMap {
    int32 pool_id = 1;
    map<int32, Pg>  pgmap = 2;
}

message PgReplica {
    int32 osd_id = 1;
    int32 replica_index = 2;
}

message Pg {
    int32 id = 1;
    int32 primary_id = 2;
    int32 expected_primary_id = 3;
    repeated PgReplica replicas = 4 [(gogoproto.nullable) = false];
    int32 next_replica_id = 5;
    int32 parent_id = 6;
    repeated int32 clildren = 7;
}

message PgMembers {
    repeated PgReplica members = 1 [(gogoproto.nullable) = false];
}

message PgStatus {
    int32 leader_node_id = 1;
    int32 status = 2;
    int64 migrated_cnt = 3;
    PgMembers replicas = 4 [(gogoproto.nullable) = false];
}

message Op {
    enum OpType {
        OP_PUT = 0;
        OP_ERASE = 1;
        OP_COMPACT = 2;
    }
    OpType type = 1;
    string prefix = 2;
    string key = 3;
    string endKey = 4;
    bytes  data = 5;
}

message Transaction {
    repeated Op ops = 1;
    uint64 bytes = 2;
    uint64 keys  = 3;
}
message PgConfigRequest {
    string keyRing = 1;
    enum OpType {
        ADD = 0;
        DEL = 1;
        EDT = 2;
        LIST = 3;
    }
    OpType op_type = 2;
    string pool = 3;
    int32 id = 4;
    uint64 epoch  = 5;
}

message PgConfigReply {
    int32 ret_code = 1;
    uint64 epoch  = 2;
    PgMap map = 3;
    PgMaps maps = 4;
    map<int32, PgStatus>  status_map = 5 [(gogoproto.nullable) = false];
}

message Mon {
    uint64 id = 1;
    string addr = 2;
}

message MonMap {
    uint64 epoch  = 1;
    map<uint64, Mon>  monMap = 2;
}