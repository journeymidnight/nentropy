syntax = "proto3";
package multiraftbase;
option go_package = "multiraftbase";

import "state.proto";
import "error.proto";
import "metadata.proto";
import "gogoproto/gogo.proto";
import "github.com/journeymidnight/nentropy/util/tracing/recorded_span.proto";

// ReadConsistencyType specifies what type of consistency is observed
// during read operations.
enum ReadConsistencyType {
    option (gogoproto.goproto_enum_prefix) = false;
    // CONSISTENT reads are guaranteed to read committed data; the
    // mechanism relies on clocks to determine lease expirations.
    CONSISTENT = 0;
    // CONSENSUS requires that reads must achieve consensus. This is a
    // stronger guarantee of consistency than CONSISTENT.
    //
    // TODO(spencer): current unimplemented.
    CONSENSUS = 1;
    // INCONSISTENT reads return the latest available, committed values.
    // They are more efficient, but may read stale values as pending
    // intents are ignored.
    INCONSISTENT = 2;
}

// ResponseHeader is returned with every storage node response.
message ResponseHeader {
    // The number of keys operated on.
    int64 num_keys = 1;
    // Range or list of ranges used to execute the request. Multiple
    // ranges may be returned for Scan, ReverseScan or DeleteRange.
    repeated PgInfo pg_infos = 2 [(gogoproto.nullable) = false];
}

// A GetRequest is the argument for the Get() method.
message GetRequest {
    option (gogoproto.equal) = true;
    bytes key = 1 [(gogoproto.casttype) = "Key"];
    bytes value = 2 [(gogoproto.casttype) = "Value"];
}

// A GetRequest is the argument for the Get() method.
message DeleteRequest {
    option (gogoproto.equal) = true;
    bytes key = 1 [(gogoproto.casttype) = "Key"];
}

// A GetResponse is the return value from the Get() method.
// If the key doesn't exist, returns nil for Value.Bytes.
message GetResponse {
    ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    bytes value = 2 [(gogoproto.casttype) = "Value"];
}

// A PutRequest is the argument to the Put() method.
message PutRequest {
    option (gogoproto.equal) = true;
    bytes key = 1 [(gogoproto.casttype) = "Key"];
    bytes value = 2 [(gogoproto.casttype) = "Value"];
    uint64 size = 3;
}

// A PutResponse is the return value from the Put() method.
message PutResponse {
    ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A PutResponse is the return value from the Put() method.
message DeleteResponse {
    ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A TruncateLogRequest is the return value from the truncatelog() method.
message TruncateLogResponse {
    ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message ChangeConfResponse {
    ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A RequestUnion contains exactly one of the requests.
// The values added here must match those in ResponseUnion.
//
// WARNING: Do not remove fields from RequestUnion. Instead, remove
// all non-header fields from the request message and prepend its
// name with "Deprecated". See DeprecatedVerifyChecksumRequest for an
// example.
//
// Be cautious about deprecating fields as doing so can lead to inconsistencies
// between replicas.
message RequestUnion {
    option (gogoproto.onlyone) = true;

    GetRequest get = 1;
    PutRequest put = 2;
    HasKeyRequest hasKey = 3;
    TruncateLogRequest truncate = 4;
    DeleteRequest delete = 5;
    ChangeConfRequest change = 6;
}

// A ResponseUnion contains exactly one of the responses.
// The values added here must match those in RequestUnion.
//
// WARNING: Do not remove fields from ResponseUnion. Instead, remove
// all non-header fields from the response message and prepend its
// name with "Deprecated". See DeprecatedVerifyChecksumResponse for an
// example.
message ResponseUnion {
    option (gogoproto.onlyone) = true;

    GetResponse get = 1;
    PutResponse put = 2;
    HasKeyResponse hasKey = 3;
    TruncateLogResponse truncate = 4;
    DeleteResponse delete = 5;
    ChangeConfResponse change = 6;
}

// A Header is attached to a BatchRequest, encapsulating routing and auxiliary
// information required for executing it.
message Header {
    reserved 7;
    // replica specifies the destination of the request.
    ReplicaDescriptor replica = 2 [(gogoproto.nullable) = false];
    // range_id specifies the ID of the Raft consensus group which the key
    // range belongs to. This is used by the receiving node to route the
    // request to the correct range.
    string group_id = 3 [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "GroupID"];
}


// A BatchRequest contains one or more requests to be executed in
// parallel, or if applicable (based on write-only commands and
// range-locality), as a single update.
message BatchRequest {
    option (gogoproto.goproto_stringer) = false;

    Header header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    RequestUnion request = 2 [(gogoproto.nullable) = false];
}

// A BatchResponse contains one or more responses, one per request
// corresponding to the requests in the matching BatchRequest. The
// error in the response header is set to the first error from the
// slice of responses, if applicable.
message BatchResponse {
    option (gogoproto.goproto_stringer) = false;

    message Header {
        reserved 4;
        // error is non-nil if an error occurred.
        Error error = 1;
        // collected_spans stores trace spans recorded during the execution of this
        // request.
        repeated github.com.journeymidnight.nentropy.util.tracing.RecordedSpan collected_spans = 6 [(gogoproto.nullable) = false];
    }

    Header header = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    ResponseUnion responses = 2 [(gogoproto.nullable) = false];
}

// The two Batch services below are identical, except that some internal
// Request types are not permitted in batches processed by External.Batch. This
// distinction exists e.g. to prevent command-line tools from accessing
// internal-only RPC methods.

service Internal {
    rpc Batch (BatchRequest) returns (BatchResponse) {}
}

service External {
    rpc Batch (BatchRequest) returns (BatchResponse) {}
}

// TruncateLogRequest is used to remove a prefix of the raft log. While there
// is no requirement for correctness that the raft log truncation be synchronized across
// replicas, it is nice to preserve the property that all replicas of a range are as close
// to identical as possible. The raft leader can also inform decisions about the cutoff point
// with its knowledge of the replicas' acknowledgment status.
message TruncateLogRequest {
    option (gogoproto.equal) = true;

    // Log entries < this index are to be discarded.
    uint64 index = 1;
    uint64 term = 2;

    // GroupID is used to double check that the correct range is being truncated.
    // The header specifies a span, start and end keys, but not the range id
    // itself. The range may have changed from the one specified in the header
    // in the case of a merge.
    string group_id = 3 [(gogoproto.customname) = "GroupID", (gogoproto.casttype) = "GroupID"];
}

enum ConfType {
    ADD_REPLICA = 0;
    REMOVE_REPLICA = 1;
}

message ChangeConfRequest {
    option (gogoproto.equal) = true;
    ConfType conf_type = 1;
    int32 osd_id = 2;
    int32 replica_id = 3;
}

// WriteBatch is the serialized representation of a RocksDB write
// batch. A wrapper message is used so that the absence of the field
// can be distinguished from a zero-length batch, and so structs
// containing pointers to it can be compared with the == operator (we
// rely on this in storage.EvalResult)
message WriteBatch {
    bytes data = 1;
}

// RaftCommand is the message written to the raft log. It contains
// some metadata about the proposal itself, then either a BatchRequest
// (legacy mode) or a ReplicatedEvalResult + WriteBatch
// (proposer-evaluated KV mode).
message RaftCommand {
    // Metadata about the proposal itself. These fields exist at
    // top-level instead of being grouped in a sub-message for
    // backwards-compatibility.

    // proposer_replica is the replica which proposed this command, to be
    // used for lease validation.
    ReplicaDescriptor proposer_replica = 1 [(gogoproto.nullable) = false];
    int32 method = 2 [(gogoproto.casttype) = "Method"];
    WriteBatch write_batch = 3;
}

// A HasKeyRequest is the argument for the Get() method.
message HasKeyRequest {
    option (gogoproto.equal) = true;
    bytes key = 1 [(gogoproto.casttype) = "Key"];
}

// A HasKeyResponse is the return value from the Get() method.
// If the key doesn't exist, returns nil for Value.Bytes.
message HasKeyResponse {
    ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    bool processed = 2;
}

